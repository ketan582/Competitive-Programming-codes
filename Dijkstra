#include <iostream>
#include<bits/stdc++.h>
using namespace std;
 typedef vector<int> vi; 
 typedef vector<vi> vvi; 
 typedef pair<int,int> ii; 
 #define sz(a) int((a).size()) 
 #define pb push_back 
 #define all(c) (c).begin(),(c).end() 
 #define tr(c,i) for(typeof((c).begin() i = (c).begin(); i != (c).end(); i++) 
 #define present(c,x) ((c).find(x) != (c).end()) 
 #define cpresent(c,x) (find(all(c),x) != (c).end()) 
 #define forin for(i=0;i<n;i++)
 #define vvi vector< vector<int> >
typedef pair<int,int> ii;
typedef vector<ii> vii;
typedef vector<vii> vvii;
int min(int a, int b){return a>b?b:a;}
int V=9;
int minDistance(int dist[], bool sptSet[])
{
   int min = INT_MAX, min_index;
 
   for (int v = 0; v < V; v++)
     if (sptSet[v] == false && dist[v] <= min)
         min = dist[v], min_index = v;
 
   return min_index;
}
int printSolution(int dist[], int n,int s)
{
   for (int i = 0; i < V; i++)
   {if(dist[i]==1600085855)dist[i]=-1;
   if(i!=s && dist[i]>0)printf("%d ",dist[i]);
    if(dist[i]<0)printf("-1 ");}
    printf("\n");
    return 0;
}
void dijkstra(int graph[][3001], int src)
{
     int dist[V]; 
     bool sptSet[V];
     for (int i = 0; i < V; i++)
        dist[i] = INT_MAX, sptSet[i] = false;
 
     dist[src] = 0;
     for (int count = 0; count < V-1; count++)
     {
       int u = minDistance(dist, sptSet);
       sptSet[u] = true;
       for (int v = 0; v < V; v++)
         if (!sptSet[v] && graph[u][v] && dist[u] != INT_MAX 
                                       && dist[u]+graph[u][v] < dist[v])
            dist[v] = dist[u] + graph[u][v];
     }
     printSolution(dist, V,src);
}
int d[3001][3001]={0};
int main() {
    int x,y,z,t,n,i,m,s;
    cin >> t;
    while(t--)
    {
        memset(d, 351, sizeof(d[0][0]) * 3001 * 3001);
        cin >> n >> m;
        V=n;
        while(m--)
        {
            cin >> x >> y >> z;
            d[x-1][y-1]=min(z,d[x-1][y-1]);
            d[y-1][x-1]=d[x-1][y-1];
           
        }
        cin >> s;
        dijkstra(d,s-1);
    }
	return 0;
}
